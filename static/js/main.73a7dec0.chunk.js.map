{"version":3,"sources":["serviceWorker.js","index.js","components/App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","state","imgHash","contract","web3","buffer","account","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","_this","setState","Buffer","result","onSubmit","console","log","add","error","hash","methods","set","send","from","r","this","loadWeb3","loadBlockchainData","ethereum","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","Images","networks","Contract","abi","address","get","call","url","react__WEBPACK_IMPORTED_MODULE_7___default","className","href","rel","role","src","alt","color","type","onChange","Component"],"mappings":"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","file":"static/js/main.73a7dec0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React, { Component } from 'react';\r\nimport Web3 from 'web3';\r\nimport './App.css';\r\nimport Images from '../abis/Image.json';\r\n//import ParticlesContainer from './ParticleContainer';\r\n\r\nconst ipfsClient = require('ipfs-http-client')\r\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) \r\n// leaving out the arguments will default to these values \r\n// bigchain can be added here\r\n\r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n    this.setState({ imgHash: \"QmSUfYNFBoiE8xw62kCMVCwBCbqMnRLJq7WHYudEuTt5Co\" })\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    this.setState({ account: accounts[0] })\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = Images.networks[networkId]\r\n    if(networkData) {\r\n      const contract = web3.eth.Contract(Images.abi, networkData.address)\r\n      this.setState({ contract: contract })\r\n      const imgHash = await contract.methods.get().call()\r\n      this.setState({ imgHash: imgHash })\r\n    } else {\r\n      window.alert('Smart contract not deployed to detected network.')\r\n    }\r\n  }\r\n\r\n    state = {\r\n      imgHash: \"QmSUfYNFBoiE8xw62kCMVCwBCbqMnRLJq7WHYudEuTt5Co\",\r\n      contract: null,\r\n      web3: null,\r\n      buffer: null,\r\n      account: null\r\n    };\r\n  \r\n\r\n  captureFile = (event) => {\r\n    event.preventDefault()\r\n    const file = event.target.files[0];\r\n    const reader = new window.FileReader()\r\n    reader.readAsArrayBuffer(file)\r\n    reader.onloadend = () =>{\r\n      this.setState({buffer:Buffer(reader.result)})\r\n    }\r\n  }\r\n\r\n  onSubmit = (event) => {\r\n    event.preventDefault()\r\n    console.log(\"Submitting file to ipfs...\")\r\n    ipfs.add(this.state.buffer, (error, result) => {\r\n      console.log('Ipfs result', result)\r\n      const imgHash = result[0].hash\r\n      this.setState({imgHash: imgHash})\r\n      if(error) {\r\n        console.error(error)\r\n        return\r\n      }\r\n       this.state.contract.methods.set(imgHash).send({ from: this.state.account }).then((r) => {\r\n         this.setState({ imgHash: imgHash });\r\n       })\r\n    }) \r\n  }\r\n  \r\n  // dafualt hash  = \"QmSUfYNFBoiE8xw62kCMVCwBCbqMnRLJq7WHYudEuTt5Co\"\r\n  // url of default image = https://ipfs.infura.io/ipfs/QmSUfYNFBoiE8xw62kCMVCwBCbqMnRLJq7WHYudEuTt5Co\r\n\r\n  render() {\r\n    let url = \"https://ipfs.infura.io/ipfs/\" + this.state.imgHash\r\n    return (\r\n      <div>\r\n         \r\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n          <a className=\"navbar-brand col-sm-3 col-md-2 mr-0 text white\" href=\"https://github.com/utkarshtrivedi56\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <small className=\"text-white\">\r\n              Store-Chain\r\n            </small>\r\n          </a>\r\n          <ul className=\"navbar-nav px-3\">\r\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\r\n              <small className=\"text-white\">\r\n                {this.state.account}\r\n              </small>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <div className=\"particle\">\r\n        {/* <ParticlesContainer/> */}\r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\r\n              <div className=\"content mr-auto ml-auto\">\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n                  <img src={url} className='Applogo' alt=\"logo\" />\r\n                <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n                <h2 color='white '>Add File</h2>\r\n                <p>&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n                <form onSubmit={this.onSubmit} >\r\n                  <input type='file' onChange={this.captureFile} />\r\n                  <input type='submit'/>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n                  <p>&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n                </form>\r\n              </div>\r\n            </main>\r\n          </div>\r\n        </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"],"sourceRoot":""}